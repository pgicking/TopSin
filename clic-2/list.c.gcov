        -:    0:Source:list.c
        -:    0:Programs:4
        -:    1:
        -:    2:#include <stdlib.h>
        -:    3:#include "list.h"
        -:    4:
function list_create called 1074 returned 100% blocks executed 75%
     1074:    5:LIST *list_create()
        -:    6:{
        -:    7:	LIST *list;
     1074:    8:	list = (LIST*)malloc(sizeof(LIST));
     1074:    9:	if (!list)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:		return NULL;
     1074:   11:	list->items = 0;
     1074:   12:	list->top = NULL;
     1074:   13:	list->last = NULL;
     1074:   14:	return list;
        -:   15:}
        -:   16:
function list_add called 3601 returned 100% blocks executed 78%
     3601:   17:LIST_ITEM *list_add(LIST *list, void *data)
        -:   18:{
        -:   19:	LIST_ITEM *p;
        -:   20:
     3601:   21:	if (!list)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   22:		return NULL;
        -:   23:	
     3601:   24:	p = (LIST_ITEM*)malloc(sizeof(LIST_ITEM));
     3601:   25:	if (!p)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   26:		return NULL;
        -:   27:
     3601:   28:	p->next = NULL;
     3601:   29:	p->data = data;
        -:   30:	
     3601:   31:	if (!list->top) {
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
     1071:   32:		list->top = p;
        -:   33:	} else {
     2530:   34:		list->last->next = p;
        -:   35:	};
        -:   36:
     3601:   37:	list->last = p;
     3601:   38:	list->items++;
     3601:   39:	return p;
        -:   40:}
        -:   41:
function list_foreach called 2 returned 100% blocks executed 100%
        2:   42:void list_foreach(LIST *list, int (*dothis)(void*))
        -:   43:{
        -:   44:	LIST_ITEM * p;
        -:   45:	
        2:   46:	p = list->top;
       35:   47:	while (p) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
       31:   48:		if (dothis)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       31:   49:			dothis(p->data);
call    0 returned 100%
       31:   50:		p = p->next;
        -:   51:	}
        2:   52:}
        -:   53:
function list_find_first called 4738 returned 100% blocks executed 100%
     4738:   54:void *list_find_first(LIST *list, void *sample, int (*match)(void*, void*))
        -:   55:{
        -:   56:	LIST_ITEM * p;
     4738:   57:	int m = 0;
        -:   58:
     4738:   59:	p = list->top;
   707288:   60:	while (p) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   699097:   61:		m = match(sample, p->data);
call    0 returned 100%
   699097:   62:		if (m)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1285:   63:			break;
   697812:   64:		p = p->next;
        -:   65:	}
     4738:   66:	return (m)?(p->data):NULL;
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -:   67:}
        -:   68:
function list_find_by_addr called 0 returned 0% blocks executed 0%
    #####:   69:void *list_find_by_addr(LIST *list, void *addr)
        -:   70:{
        -:   71:	LIST_ITEM * p;
        -:   72:
    #####:   73:	p = list->top;
    #####:   74:	while (p) {
branch  0 never executed
branch  1 never executed
    #####:   75:		if (addr == p->data)
branch  0 never executed
branch  1 never executed
    #####:   76:			break;
    #####:   77:		p = p->next;
        -:   78:	}
    #####:   79:	return (p)?(p->data):NULL;
branch  0 never executed
branch  1 never executed
        -:   80:}
        -:   81:
function list_delete called 1074 returned 100% blocks executed 100%
     1074:   82:void list_delete(LIST *list, void (*delete_item)(void *data))
        -:   83:{
        -:   84:	LIST_ITEM *p, *q;
     1074:   85:	p = list->top;
        -:   86:
     5749:   87:	while (p) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
     3601:   88:		q = p->next;
     3601:   89:		if ((delete_item) && (p->data)) {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     2243:   90:			delete_item(p->data);
call    0 returned 100%
        -:   91:		};
     3601:   92:		free(p);
     3601:   93:		p = q;
        -:   94:	};
        -:   95:
     1074:   96:	free(list);
     1074:   97:	return;
        -:   98:}
