#!/usr/bin/expect

set tool "a.out"
set CLIC "./a.out"
set QUIT "\\q\n"
set timeout 1

set teststack {
	{"1"      "\n"} 
	{"1"      "Enter data :"}
	{"9"      "\n"}
	{"1"      "Enter data :"}
	{"8"      "\n"} 
	{"3"      "Top element : 8"}
	{"6"      "8 9"}
	{"7"      "No. of elements in stack : 2"}
	{"2"      "Popped value : 8"}
	{"4"      "Stack is not empty with 1 elements"}
	{"2"      "Popped value : 9"}
	{"4"      "Stack is empty"}
	{"8"      "All stack elements destroyed"}
	{"1"	  "Enter data : "}
	{"5"      "\n"}
	{"8"      "Segmentation fault (core dumped)"}

}

set teststackerr {
	{"1"     "\n"}
	{"1"     "Enter data : "}
	{"a"     "Input was not an integer, try again."}
	{"1111111111111111111111111111111111111111111111111111111111111111111111111111111" ""}
	{"-99999999999999999999999999999999999999999999999999999999999"   ""}
	{"6"     "0 -1"}
	{"8"      "All stack elements destroyed"}
	{"7"      "No. of elements in stack : 0"}
	{"3"      "No elements in stack"}
	{"6"      "Stack is empty"}
	{"2"      "Error : Trying to pop from empty stack"}
	
}


set testqueue {
	{"2"      "\n"}
        {"1"      "Enter data : "}
	{"9"      "\n"}
	{"1"      "Enter data : "}
	{"8"      "\n"}
	{"1"      "Enter data : "}
	{"7"      "\n"}
	{"7"      "Queue size : 3"}
	{"6"      "9 8 7"}
	{"3"      "Front element : 9"}
	{"2"      "Dequed value : 9"}
	{"4"      "Queue not empty"}
	{"2"      "Dequed value : 8"}
	{"2"      "Dequed value : 7"}
	{"4"	  "Queue empty"}
	{"2"      "Error: Trying to display elements from empty queue"}
	{"5"	  ""}

}

set testlist {
	{"3"      "\n"}
	{"1"      "Enter value to node : "}
	{"a"      "Input was not an integer, try again."}
	{"9"      ""}
	{"2"      "Enter value to node : "}
	{"1"      ""}
	{"2"      "Enter value to node :"}
	{"11"     ""}
	{"5"      "Linked list elements from begining :  9  1  11"}
	{"6"      "Reverse order of linked list is :  11  1  9"}
	{"7"      "Enter value to search : "}
	{"1"      "Data found in 4 position"}
	{"8"      "Linked list elements from begining :  1  9  11"}
	{"9"      "Enter node data to be updated : "}
	{"11"     "Enter new data : "}
	{"5"      "Linked list elements from begining :  1  9  5"}
	{"3"      "Enter position to be inserted : "}
	{"5"      "Position out of range to insert"}
	{"3"      "Enter position to be inserted : "}
	{"3"      "Enter value to node : "}
	{"90"     ""}
	{"4"      "Enter position to be deleted : "}
	{"3"      "Node deleted"}
	{"10"     ""}


}

set testmenu {
	{"10"      "Wrong choice menu"}
	{"1"       ""}
	{"10"      "Wrong choice, Please enter correct choice"}
	{"a"       "Input was not an integer, try again."}
	{"5"       ""}
}

spawn $CLIC
# global ICALC
foreach pattern $teststack {
    set inputs   [lindex $pattern 0]
    set expected [lindex $pattern 1]
    send "$inputs\n"
    expect {
        -ex $expected { pass $inputs }
        default   { fail $inputs }
    }
}

spawn $CLIC
# global ICALC
foreach pattern $teststackerr {
    set inputs   [lindex $pattern 0]
    set expected [lindex $pattern 1]
    send "$inputs\n"
    expect {
        -ex $expected { pass $inputs }
        default   { fail $inputs }
    }
}

spawn $CLIC
# global ICALC
foreach pattern $testmenu {
    set inputs   [lindex $pattern 0]
    set expected [lindex $pattern 1]
    send "$inputs\n"
    expect {
        -ex $expected { pass $inputs }
        default   { fail $inputs }
    }
}

spawn $CLIC
# global ICALC
foreach pattern $testqueue {
    set inputs   [lindex $pattern 0]
    set expected [lindex $pattern 1]
    send "$inputs\n"
    expect {
        -ex $expected { pass $inputs }
        default   { fail $inputs }
    }
}

spawn $CLIC
# global ICALC
foreach pattern $testlist {
    set inputs   [lindex $pattern 0]
    set expected [lindex $pattern 1]
    send "$inputs\n"
    expect {
        -ex $expected { pass $inputs }
        default   { fail $inputs }
    }
}
